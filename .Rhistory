hc_xAxis(categories = bluevsmep$Fecha) %>%
hc_yAxis(title = list(text = "Brecha")) %>%
hc_add_series(name = "brecha",
data = bluevsmep$brecha,
color = "#007bff") %>%
highcharter::hc_tooltip(crosshairs = TRUE, pointFormat = "Brecha: % {point.y}") %>%
highcharter::hc_legend(enabled = FALSE) %>%
highcharter::hc_xAxis(
title = list(text = ""),
reversed = FALSE,
labels = list(
style = list(color = "black", fontWeight = "bold")
)
) %>%
highcharter::hc_yAxis(
title = list(text = "% Brecha",
style = list(color = "black", fontWeight = "bold")),
gridLineWidth = 0,
reversed = FALSE,
labels = list(
style = list(color = "black", fontWeight = "bold")
)
) %>%
highcharter::hc_caption(
text = paste0("Brecha Blue vs Mep"),
style = list(fontSize = '12px', fontWeight = 'bold', color = "black")) %>%
highcharter::hc_tooltip(
crosshairs = TRUE,
backgroundColor = "#F0F0F0",
shared = TRUE,
borderWidth = 5
) %>%
hc_title(
text = paste0('Brecha Cambiaria.'),
style = list(fontSize = '16px', fontWeight = 'bold', color = "black"))
})
# value box ----------------------------------------------------------------------
#
output$valuebox_1 <- renderbs4ValueBox({
bs4ValueBox(
value = "",
subtitle = HTML(
"Blue: $", as.character(dolarbluecierre),"<br>",
"Mep: $", as.character(dolarmepcierre),"<br>",
"Oficial: $", as.character(dolaroficialcierre)),
icon = icon("dollar-sign"),
color = "teal",
width = 3,
footer = div(paste0("Precios al ",today))
)
})
output$valuebox_3 <- renderbs4ValueBox({
bs4ValueBox(
value = paste0(
as.character(
get_dolar_interanual_input(
dolar, input$daterange3[1], input$daterange3[2]
)
), " %"),
subtitle = paste0("Variacion % Dolar Blue"),
icon = icon("info"),
color = "teal",
width = 3,
footer = div(
paste0(
"De: ", input$daterange3[1],
" a: ",input$daterange3[2]
)
)
)
})
output$valuebox_2 <- renderbs4ValueBox({
bs4ValueBox(
value = "",
subtitle = HTML(
"Blue: ", as.character(rv$var_dolar_blue)," %<br>",
"Mep: ", as.character(rv$var_dolar_mep)," %<br>",
"Oficial: ", as.character(rv$var_dolar_oficial)," %"),
icon = icon("coins"),
color = "teal",
width = 3,
footer = div(paste0("Variacion % Ultimos ", as.character(rv$dias_variacion) ," dias"))
)
})
output$valuebox_brechas_1 <- renderbs4ValueBox({
bs4ValueBox(
value = paste0(
as.character(
bluevsmep$brecha[nrow(bluevsmep)]
), " %"),
subtitle = paste0("Brecha Blue vs Mep"),
icon = icon(info_bluevsmep[2]),
color = info_bluevsmep[1],
width = 3,
footer = div(
paste0(
max(bluevsmep$Fecha)
)
)
)
})
output$valuebox_brechas_2 <- renderbs4ValueBox({
bs4ValueBox(
value = paste0(
as.character(
mepvsoficial$brecha[nrow(mepvsoficial)]
), " %"),
subtitle = paste0("Brecha Mep vs Oficial"),
icon = icon(info_mepvsoficial[2]),
color = info_mepvsoficial[1],
width = 3,
footer = div(
paste0(
max(mepvsoficial$Fecha)
)
)
)
})
output$valuebox_brechas_3 <- renderbs4ValueBox({
bs4ValueBox(
value = paste0(
as.character(
bluevsoficial$brecha[nrow(bluevsoficial)]
), " %"),
subtitle = paste0("Brecha Blue vs Oficial"),
icon = icon(info_bluevsoficial[2]),
color = info_bluevsoficial[1],
width = 3,
footer = div(
paste0(
max(bluevsoficial$Fecha)
)
)
)
})
output$downloadCSV <- downloadHandler(
filename = function() {
"dolar.csv"
},
content = function(file) {
write.csv(data, file)
}
)
}
shinyApp(ui = ui, server = server)
shiny::runApp()
library(flexdashboard)
library(ggplot2)
library(dplyr)
library(plotly)
library(rvest)
library(tidyverse)
library(readxl)
library(lubridate)
library(gganimate)
library(openxlsx)
library(dygraphs)
library(xts)
URL = 'https://dolarhistorico.com/cotizacion-dolar-blue/mes/'
URL_BLUE = "https://dolarhoy.com/cotizaciondolarblue"
URL_MEP = "https://dolarhoy.com/cotizaciondolarbolsa"
URL_OFICIAL = "https://dolarhoy.com/cotizaciondolaroficial"
today = format(with_tz(Sys.time() , tzone = "America/Argentina/Buenos_Aires"), format = "%Y-%m-%d")
last_update <- paste("Last update: ", today(), sep = "")
get_dolarhoy = function(url){
webpage <- read_html(url)
compra_node <- webpage %>%
html_nodes(xpath = "//div[@class='topic'][text()='Compra']/following-sibling::div[@class='value']")
venta_node <- webpage %>%
html_nodes(xpath = "//div[@class='topic'][text()='Venta']/following-sibling::div[@class='value']")
compra_valor <- round(as.numeric(gsub("\\$","", html_text(compra_node))),2)
venta_valor <- round(as.numeric(gsub("\\$","", html_text(venta_node))),2)
promedio <- round(((venta_valor+compra_valor)/2),2)
return(c("compra" = compra_valor, "venta" = venta_valor, "promedio" = promedio))
}
edit_dolar_historico = function(df){
return(
df %>% mutate(
Fecha = as.Date(Fecha, format = "%d/%m/%Y"),
Compra = as.numeric(Compra),
Venta = as.numeric(Venta),
Promedio = as.numeric(Promedio),
variacion = as.numeric(variacion))
)
}
data = edit_dolar_historico(read_excel('data/dolar.xlsx') %>% select(Fecha,Compra,Venta,Promedio,variacion)) %>% arrange(Fecha)
datamep = edit_dolar_historico(read_excel('data/dolarmep.xlsx') %>% select(Fecha,Compra,Venta,Promedio,variacion)) %>% arrange(Fecha)
dataoficial = edit_dolar_historico(read_excel('data/dolaroficial.xlsx') %>% select(Fecha,Compra,Venta,Promedio,variacion)) %>% arrange(Fecha)
get_ts_dolar = function(data, URL) {
from_year=year(max(data$Fecha))
from_month=month(max(data$Fecha))
vector_years = c(from_year:year(today()))
months = c('enero', 'febrero', 'marzo',
'abril', 'mayo', 'junio',
'julio', 'agosto', 'septiembre',
'octubre', 'noviembre', 'diciembre'
)
vector_months = months[from_month:length(months)]
vector_final = c()
datalist = list()
datalist = vector("list")
counter = 1
for (i in 1:length(vector_years)) {
counter = counter + 1
year = vector_years[i]
for (i in 1:length(vector_months)) {
counter = counter + 1
month = vector_months[i]
vector_final[counter] = paste0(month, '-', year)
}
}
for (i in 1:length(vector_final)) {
skip_to_next <- FALSE
link = paste0(
URL,vector_final[i])
data = as.data.frame(rvest::html_table(read_html(link)))
datalist[[i]] <- data
tryCatch(print(b), error = function(e) {skip_to_next <<- TRUE})
if( skip_to_next ) { next }
}
dolar = do.call(rbind, datalist)
return(
dolar
)
}
edit_dolar = function(df){
return(
data.frame(df) %>% mutate(
Fecha = as.Date(Fecha, format = "%d/%m/%Y"),
Compra = round(as.numeric(gsub(",", ".", Compra)),2),
Venta = round(as.numeric(gsub(",", ".", Venta)),2),
Promedio = ((Compra + Venta) / 2),
variacion = round(as.numeric(gsub(",", ".", gsub("%", "", VariaciÃ³n))),2) ) %>%
select(Fecha, Compra, Venta, Promedio, variacion)
)
}
get_tibble = function(dolarhoy, data, today){
return(
tibble(
Fecha = as.Date(today),
Compra = dolarhoy["compra"][[1]],
Venta = dolarhoy["venta"][[1]],
Promedio = dolarhoy["promedio"][[1]],
variacion = round(
((dolarhoy["promedio"][[1]]-data$Promedio[nrow(data)] ) / data$Promedio[nrow(data)]),2
)
)
)
}
if (today>=max(data$Fecha)){
if (today == max(data$Fecha)+1 | today == max(data$Fecha)){
dolarhoy_blue= get_dolarhoy(URL_BLUE)
dolar = unique(bind_rows(
data %>% filter(Fecha < today),
get_tibble(dolarhoy_blue, data, today)
) %>% arrange(Fecha)
)
} else {
dolar = unique(bind_rows(data, edit_dolar(get_ts_dolar(data, URL))) %>% arrange(Fecha))
}
write.xlsx(dolar, 'data/dolar.xlsx', rowNames = FALSE, overwrite = TRUE)
rm(data)
} else {
dolar <- data %>% arrange(Fecha)
rm(data)
}
if (today>=max(datamep$Fecha)){
dolarhoy_mep= get_dolarhoy(URL_MEP)
dolarmep = unique(bind_rows(
datamep %>% filter(Fecha < today),
get_tibble(dolarhoy_mep, datamep, today)
) %>% arrange(Fecha)
)
write.xlsx(dolarmep, 'data/dolarmep.xlsx', rowNames = FALSE, overwrite = TRUE)
rm(datamep)
} else {
dolarmep <- datamep %>% arrange(Fecha)
rm(datamep)
}
if (today>=max(dataoficial$Fecha)){
dolarhoy_oficial= get_dolarhoy(URL_OFICIAL)
dolaroficial = unique(bind_rows(
dataoficial %>% filter(Fecha < today),
get_tibble(dolaroficial, dataoficial, today)
) %>% arrange(Fecha)
)
write.xlsx(dolaroficial, 'data/dolaroficial.xlsx', rowNames = FALSE, overwrite = TRUE)
rm(dataoficial)
} else {
dolaroficial <- dataoficial %>% arrange(Fecha)
rm(dataoficial)
}
if (today>=max(dataoficial$Fecha)){
dolarhoy_oficial= get_dolarhoy(URL_OFICIAL)
dolaroficial = unique(bind_rows(
dataoficial %>% filter(Fecha < today),
get_tibble(dolarhoy_oficial, dataoficial, today)
) %>% arrange(Fecha)
)
write.xlsx(dolaroficial, 'data/dolaroficial.xlsx', rowNames = FALSE, overwrite = TRUE)
rm(dataoficial)
} else {
dolaroficial <- dataoficial %>% arrange(Fecha)
rm(dataoficial)
}
runApp()
library(flexdashboard)
library(ggplot2)
library(dplyr)
library(plotly)
library(rvest)
library(tidyverse)
library(readxl)
library(lubridate)
library(gganimate)
library(openxlsx)
library(dygraphs)
library(xts)
URL = 'https://dolarhistorico.com/cotizacion-dolar-blue/mes/'
URL_BLUE = "https://dolarhoy.com/cotizaciondolarblue"
URL_MEP = "https://dolarhoy.com/cotizaciondolarbolsa"
URL_OFICIAL = "https://dolarhoy.com/cotizaciondolaroficial"
today = format(with_tz(Sys.time() , tzone = "America/Argentina/Buenos_Aires"), format = "%Y-%m-%d")
last_update <- paste("Last update: ", today(), sep = "")
get_dolarhoy = function(url){
webpage <- read_html(url)
compra_node <- webpage %>%
html_nodes(xpath = "//div[@class='topic'][text()='Compra']/following-sibling::div[@class='value']")
venta_node <- webpage %>%
html_nodes(xpath = "//div[@class='topic'][text()='Venta']/following-sibling::div[@class='value']")
compra_valor <- round(as.numeric(gsub("\\$","", html_text(compra_node))),2)
venta_valor <- round(as.numeric(gsub("\\$","", html_text(venta_node))),2)
promedio <- round(((venta_valor+compra_valor)/2),2)
return(c("compra" = compra_valor, "venta" = venta_valor, "promedio" = promedio))
}
edit_dolar_historico = function(df){
return(
df %>% mutate(
Fecha = as.Date(Fecha, format = "%d/%m/%Y"),
Compra = as.numeric(Compra),
Venta = as.numeric(Venta),
Promedio = as.numeric(Promedio),
variacion = as.numeric(variacion))
)
}
data = edit_dolar_historico(read_excel('data/dolar.xlsx') %>% select(Fecha,Compra,Venta,Promedio,variacion)) %>% arrange(Fecha)
datamep = edit_dolar_historico(read_excel('data/dolarmep.xlsx') %>% select(Fecha,Compra,Venta,Promedio,variacion)) %>% arrange(Fecha)
dataoficial = edit_dolar_historico(read_excel('data/dolaroficial.xlsx') %>% select(Fecha,Compra,Venta,Promedio,variacion)) %>% arrange(Fecha)
get_ts_dolar = function(data, URL) {
from_year=year(max(data$Fecha))
from_month=month(max(data$Fecha))
vector_years = c(from_year:year(today()))
months = c('enero', 'febrero', 'marzo',
'abril', 'mayo', 'junio',
'julio', 'agosto', 'septiembre',
'octubre', 'noviembre', 'diciembre'
)
vector_months = months[from_month:length(months)]
vector_final = c()
datalist = list()
datalist = vector("list")
counter = 1
for (i in 1:length(vector_years)) {
counter = counter + 1
year = vector_years[i]
for (i in 1:length(vector_months)) {
counter = counter + 1
month = vector_months[i]
vector_final[counter] = paste0(month, '-', year)
}
}
for (i in 1:length(vector_final)) {
skip_to_next <- FALSE
link = paste0(
URL,vector_final[i])
data = as.data.frame(rvest::html_table(read_html(link)))
datalist[[i]] <- data
tryCatch(print(b), error = function(e) {skip_to_next <<- TRUE})
if( skip_to_next ) { next }
}
dolar = do.call(rbind, datalist)
return(
dolar
)
}
edit_dolar = function(df){
return(
data.frame(df) %>% mutate(
Fecha = as.Date(Fecha, format = "%d/%m/%Y"),
Compra = round(as.numeric(gsub(",", ".", Compra)),2),
Venta = round(as.numeric(gsub(",", ".", Venta)),2),
Promedio = ((Compra + Venta) / 2),
variacion = round(as.numeric(gsub(",", ".", gsub("%", "", VariaciÃ³n))),2) ) %>%
select(Fecha, Compra, Venta, Promedio, variacion)
)
}
get_tibble = function(dolarhoy, data, today){
return(
tibble(
Fecha = as.Date(today),
Compra = dolarhoy["compra"][[1]],
Venta = dolarhoy["venta"][[1]],
Promedio = dolarhoy["promedio"][[1]],
variacion = round(
((dolarhoy["promedio"][[1]]-data$Promedio[nrow(data)] ) / data$Promedio[nrow(data)]),2
)
)
)
}
if (today>=max(data$Fecha)){
if (today == max(data$Fecha)+1 | today == max(data$Fecha)){
dolarhoy_blue= get_dolarhoy(URL_BLUE)
dolar = unique(bind_rows(
data %>% filter(Fecha < today),
get_tibble(dolarhoy_blue, data, today)
) %>% arrange(Fecha)
)
} else {
dolar = unique(bind_rows(data, edit_dolar(get_ts_dolar(data, URL))) %>% arrange(Fecha))
}
write.xlsx(dolar, 'data/dolar.xlsx', rowNames = FALSE, overwrite = TRUE)
rm(data)
} else {
dolar <- data %>% arrange(Fecha)
rm(data)
}
if (today>=max(datamep$Fecha)){
dolarhoy_mep= get_dolarhoy(URL_MEP)
dolarmep = unique(bind_rows(
datamep %>% filter(Fecha < today),
get_tibble(dolarhoy_mep, datamep, today)
) %>% arrange(Fecha)
)
write.xlsx(dolarmep, 'data/dolarmep.xlsx', rowNames = FALSE, overwrite = TRUE)
rm(datamep)
} else {
dolarmep <- datamep %>% arrange(Fecha)
rm(datamep)
}
if (today>=max(dataoficial$Fecha)){
dolarhoy_oficial= get_dolarhoy(URL_OFICIAL)
dolaroficial = unique(bind_rows(
dataoficial %>% filter(Fecha < today),
get_tibble(dolarhoy_oficial, dataoficial, today)
) %>% arrange(Fecha)
)
write.xlsx(dolaroficial, 'data/dolaroficial.xlsx', rowNames = FALSE, overwrite = TRUE)
rm(dataoficial)
} else {
dolaroficial <- dataoficial %>% arrange(Fecha)
rm(dataoficial)
}
plot_ly() %>%
add_lines(y = dolar$Promedio,
name = "Promedio",
x = dolar$Fecha,
line = list(shape = "spline"))  %>%
layout(title = paste0("Dolar Paralelo promedio 2020 - ",year(today())),
xaxis = list(title = 'Periodo'),
yaxis = list (title = 'Tipo de Cambio'))
d=dolar %>% mutate(y = year(Fecha)) %>% filter(y == 2023) %>%  select(Fecha,Compra,Venta) %>%
as.xts(order.by = .$Fecha)
dygraph(d, main = "dolar") %>%
dySeries(c("Compra"), label = "c") %>%
dySeries(c("Venta"), label = "v") %>%
dyRangeSelector() %>%
dyUnzoom() %>%
dyHighlight(highlightCircleSize = 5,
highlightSeriesBackgroundAlpha = 0.7,
hideOnMouseOut = FALSE)
dolar$Promedio = round(dolar$Promedio,2)
dl = dolar %>%
ggplot(aes(x = Fecha, y = Promedio)) +
geom_path(aes(x = Fecha, y = Promedio), alpha = 0.7, size = 1.5, width = 1, color = '#39ad58') +
geom_point(aes(x = Fecha, y = Promedio), alpha = 1, size = 4, width = 2,color = 'grey') +
ggtitle("Regions With Most Cases") +
scale_x_date(date_labels = "%Y") +
scale_y_continuous(limits = c(min(dolar$Promedio)/1.10, max(dolar$Promedio)*1.10)) +
geom_text(aes(label = paste0("Precio: $",Promedio,'\nPeriodo:',month(dolar$Fecha),'/',year(dolar$Fecha))), hjust = +1, size = 6) +
labs(title = 'Dolar Paralelo, Fecha: {frame_along}', x = 'AÃ±o', y = 'Dolar Paralelo', subtitle = "Dinamica del Dolar Paralelo",
caption = "Elaboracion propia en base a datos de Ambito.com") +
theme_bw() +
theme(legend.position = "bottom") +
transition_reveal(Fecha) +
geom_vline(xintercept=dolar$Fecha[4515],linetype=1,
color = "black", size=0.8)
anim_save("plot/dolar.gif", dl)
plot_ly(dolar) %>%
add_lines(x = ~Fecha, y = ~variacion,
mode = 'lines',
name = "Variacion Tipo de Cambio",
line = list(color = '#1149f2', width = 1.5)) %>%
add_lines(x = ~Fecha, y = ~sd(dolar$variacion, na.rm = T)*3,
mode = 'lines',
name = "+3 Desvios Estandard",
line = list(color = 'red', width = 1.5)) %>%
add_lines(x = ~Fecha, y = ~sd(dolar$variacion, na.rm = T)*-3,
mode = 'lines',
name = "-3 Desvios Estandard",
line = list(color = 'orange', width = 1.5)) %>%
layout(title = '<b>Variaciones del Tipo de Cambio desde 2002</b>',
yaxis2 = list(overlaying = "y", side = "right", title = 'Recaudacion', showgrid = FALSE ,zeroline = FALSE),
yaxis = list(side = 'left', title = '%',showgrid = FALSE, zeroline = FALSE),
xaxis = list( title = 'AÃ±o'),
legend = list(x = 1.05),
hovermode = "compare")
View(dolar)
View(dolarmep)
View(dolaroficial)
shiny::runApp()
runApp()
runApp()
